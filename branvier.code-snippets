//Add this to your vs code snippets.
//
//Copy everything to your snippets:
// 1. Cmd + shift + p -> "Snippets: Configure User Snippets"
// 2. Choose: New Global Snipper File
// 3. Copy all the content below and paste in your new file.
//
//You can manually do it, also:
//User>$>Library>Application Support>Code>User>snippets.
{
	"Generates a extension on model": {
		"prefix": "gextension",
		"body": [
			"import 'package:branvier/branvier.dart';",
			"",
			"///Adds getters and utilities to [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}].",
			"extension ${2}Ext on ${2} {",
			"///Checks if this is logged.",
			"bool get isLogged => token != null;",
			"",
			"///The [${2}] date in [DateTime]",
			"DateTime get date => 1617615315.toDate();",
			"",
			"///Updates this [${2}].",
			"${2} update(${2} other) => copyWith(avatar: other.avatar);",
			"}",
			"",
			""
		],
		"description": "Generates a extension on model"
	},
	"Generates a repository class": {
		"prefix": "grepository",
		"body": [
			"import 'package:branvier/branvier.dart';",
			"import '../../data/models/${1:${TM_FILENAME_BASE/([^_]+).*/${1}/}}.dart';",
			"",
			"/// [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Repository] encapsulates all data processing of [${2}].",
			"class ${2}Repository {",
			"  ${2}Repository(this._api, this._box);",
			"  static const key = '${1}';",
			"  ",
			"  //Dependencies",
			"  final IApi _api;",
			"  final IBox _box;",
			"  //final OtherSource _other;",
			"  ",
			"  //Loads [${2}] from Cache.",
			"  Future<${2}?> load() async {",
			"  final json = await _box.read(key);",
			"  return json.ifNon(Test.fromJson); //If non-null, parses fromJson.",
			"  }",
			"  ",
			"  ///Get [${2}] by [id] from api.",
			"  Future<${2}> getById(String id) async {",
			"  //Fetch map from api.",
			"  final map = await _api.get<Json>('get_${1}?id=\\$id');",
			"  ",
			"  //Save to storage box.",
			"  await _box.write(key, map.toJson());",
			"  ",
			"  //Return to ${2}Service.",
			"  return ${2}.fromMap(map);",
			"  }",
			"  ",
			"  ///Get all [${2}] from api.",
			"  Future<List<${2}>> getAll() async {",
			"  //Fetch maps from api.",
			"  final data = await _api.get<Maps>('get_test');",
			"  ",
			"  //Return list.",
			"  return data.list(Test.fromMap); // same as .map().toList()",
			"  }",
			"  ",
			"  //Methods examples",
			"  Future<void> update() async {}",
			"  Future<void> delete() async {}",
			"",
			"}",
			""
		],
		"description": "Generates a Repository class"
	},
	"Generates an app service class": {
		"prefix": "gserviceapp",
		"body": [
			"import 'package:branvier/state.dart';",
			"import '../../data/models/${1:${TM_FILENAME_BASE/([^_]+).*/${1}/}}.dart';",
			"",
			"/// [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Service] encapsulates all business logic of [${2}].",
			"class ${2}Service {",
			"  //Services",
			"  // OtherService get _otherService => Modular.get();",
			"  ",
			"  //States",
			"  final _${1} = ${2}().obn;",
			"  ",
			"  //Getters",
			"  ${2}? get ${1} => _${1}.value;",
			"  ",
			"  //Async initializer",
			"  Future<void> init() async {}",
			"",
			"}",
			""
		],
		"description": "Generates a app service class"
	},
	"Generates a data service class": {
		"prefix": "gservicedata",
		"body": [
			"import 'package:branvier/state.dart';",
			"import '../../data/models/${1}.dart';",
			"import '../../data/repositories/${1:${TM_FILENAME_BASE/([^_]+).*/${1}/}}_repository.dart';",
			"",
			"/// [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Service] encapsulates all business logic of [${2}].",
			"class ${2}Service {",
			"  ${2}Service(this._repository);",
			"  final ${2}Repository _repository;",
			"  ",
			"  //States",
			"  final _${1} = ${2}().obn;",
			"  final _${1}s = <${2}>[].obs;",
			"  ",
			"  //Getters",
			"  ${2}? get ${1} => _${1}.value;",
			"  List<${2}> get ${1}s => _${1}s;",
			"  ",
			"  //Async initializer",
			"  Future<void> init() async {}",
			"  ",
			"  /// Fetch [${2}] by [id] from [${2}Repository].",
			"  Future<void> fetchUser(int id) async {",
			"  _${1}.value = await _repository.getById(id);",
			"  }",
			"  /// Fetch all [${2}] from [${2}Repository].",
			"  Future<void> fetchUsers() async {",
			"  _${1}s.value = await _repository.getAll();",
			"  }",
			"  /// Resets the state of the current [${2}].",
			"  Future<void> disposeUser() async {",
			"  _${1}.value = null; //attach to bind.onDispose",
			"  }",
			"",
			"}",
			""
		],
		"description": "Generates a data service class"
	},
	"Generates a controller": {
		"prefix": "gcontroller",
		"body": [
			"import 'package:branvier/state.dart';",
			"",
			"///Controls ${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Page.",
			"class ${2}Controller {",
			" ",
			" //States",
			" final _count = 1.obs;",
			" final _check = false.obs;",
			" ",
			" //Getters",
			" int get count => _count.value;",
			" bool get isCheck => _check.value;",
			" ",
			" //Events",
			" void onIncrement() => _count.value++;",
			" ",
			" Future<void> onBoxCheck() async {",
			"  _check.toggle(); //alternates between true & false",
			" }",
			" ",
			" // ! verify if this is attached to the bind onDispose",
			" void onDispose() {",
			"  // someService.disposeSomething();",
			" }",
			"}",
			""
		],
		"description": "Generates a extension on model",
	},
	"Generates a page": {
		"prefix": "gpage",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:flutter_modular/flutter_modular.dart';",
			"",
			"import 'home_controller.dart';",
			"",
			"///[${2}Page] is a view controlled by [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Controller].",
			"class ${2}Page extends StatelessWidget {",
			"\tconst ${2}Page({super.key});",
			"",
			"\t/// Get instance of [${2}Controller].",
			"\t${2}Controller get controller => Modular.get();",
			"",
			"\t@override",
			"\tWidget build(BuildContext context) {",
			"\t\treturn Scaffold(",
			"\t\t\tappBar: AppBar(title: Text(Modular.to.path)),",
			"\t\t\tbody: Center(",
			"\t\t\t\tchild: Column(",
			"\t\t\t\t\tmainAxisSize: MainAxisSize.min,",
			"\t\t\t\t\tchildren: [",
			"\t\t\t\t\t\tElevatedButton(",
			"\t\t\t\t\t\t\tonPressed: () {",
			"\t\t\t\t\t\t\t//todo: implement",
			"\t\t\t\t\t\t},",
			"\t\t\t\t\t\t\tchild: const Text('${3:Button Text}'),",
			"\t\t\t\t\t\t),",
			"\t\t\t\t\t\tElevatedButton(",
			"\t\t\t\t\t\t\tonPressed: Modular.to.pop,",
			"\t\t\t\t\t\t\tchild: const Text('Back'),",
			"\t\t\t\t\t\t),",
			"\t\t\t\t\t],",
			"\t\t\t\t),",
			"\t\t\t),",
			"\t\t);",
			"\t}",
			"}",
			""
		],
		"description": "Generates a page",
	},
	"Generates a module": {
		"prefix": "gmodule",
		"body": [
			"import 'package:flutter_modular/flutter_modular.dart';",
			"import '${1:${TM_FILENAME_BASE/([^_]+).*/${1}/}}_controller.dart';",
			"import '${1}_page.dart';",
			"",
			"///Binds [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Controller] to [${2}Page].",
			"class ${2}Module extends Module {",
			"  @override",
			"  final List<Bind> binds = [",
			"    Bind.lazySingleton<HomeController>(",
			"      (i) => HomeController(),",
			"      onDispose: (controller) => controller.onDispose(),",
			"    ),",
			"  ];",
			"  ",
			"  @override",
			"  final List<ModularRoute> routes = [",
			"    ChildRoute('/', child: (_, args) => const ${2}Page()),",
			"  ];",
			"}",
			""
		],
		"description": "Generates a extension on model"
	},
	"Access to binded controller": {
		"prefix": "ggetcontroller",
		"body": [
			"/// Get instance of [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Controller].",
			"${2}Controller get controller => Modular.get();",
		],
		"description": "Generates a Controller getter using Moduler"
	},
	"Access to binded service": {
		"prefix": "ggetservice",
		"body": [
			"${1}Service get _${2} => Modular.get();"
		],
		"description": "Generate a service getter using Modular"
	}
}