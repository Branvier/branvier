///Add this to your vs code snippets.
///User>$>Library>Application Support>Code>User>snippets.
{
	"Generates a fromList for model": {
		"prefix": "fromList",
		"body": [
			"\t  static List<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}> fromList(List list) =>",
			"\t// ignore: unnecessary_lambdas",
			"\tlist.map((e) => ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}.fromMap(e)).toList();",
		],
		"description": "Generates a list, put inside model."
	},
	"Generates a service class": {
		"prefix": "gservice",
		"body": [
			"import 'package:get/state_manager.dart';",
			"import '../repositories/${1:${TM_FILENAME_BASE/([^_]+).*/${1}/}}_repository.dart';",
			"import '../models/${1}.dart';",
			"",
			"/// [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Service] encapsulates all business logic of [${2}]",
			"class ${2}Service extends GetxService {",
			"  ${2}Service(this._repository);",
			"  ",
			"  //Dependencies",
			"  final ${2}Repository _repository;",
			"  //final OtherService _other;",
			"  ",
			"  //State",
			"  final _state = Rxn<${2}>();${3}",
			"  // final _state = <${2}>[].obs;",
			"  // final _state = <${2}>{}.obs;",
			"  ",
			"  //Getters",
			"  ${2}? get ${1} => _state.value;",
			"  // List<${2}> get ${1}s => _state;",
			"  // Map<${2}> get ${1}s => _state;",
			"  ",
			"  //Async initializer",
			"  Future<void> init() async {}",
			"  ",
			"  //Methods examples",
			"  Future<void> fetch() async {} //for getting state",
			"  Future<void> update() async {} //for updating state",
			"  Future<void> start() async {} //start streaming state",
			"  Future<void> add() async {} //remove item of list state",
			"  Future<void> remove() async {} //remove item of list state",
			"  Future<void> stop() async {} //stop streaming state",
			"",
			"}",
			""
		],
		"description": "Generates a Service class"
	},
	"Generates a repository class": {
		"prefix": "grepository",
		"body": [
			"import 'package:branvier/branvier.dart';",
			"import '../models/${1:${TM_FILENAME_BASE/([^_]+).*/${1}/}}.dart';",
			"",
			"/// [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}Repository] encapsulates all data processing of [${2}].",
			"class ${2}Repository {",
			"  ${2}Repository(this._api, this._box);",
			"  ",
			"  //Dependencies",
			"  final IApi _api;",
			"  final IBox _box;",
			"  //final OtherSource _other;",
			"  static const _key = '${1}';",
			"  ",
			"  //Loads [${2}] from Cache",
			"  Future<${2}> load() {",
			"  //If not null, parses fromJson. Or, if null, returns ${2}()",
			"  return _box.read(_key).thenTry(${2}.fromJson).or(${2}());",
			"  }",
			"  ",
			"  ///Get [${2}] by [id] from api.",
			"  Future<${2}> get${2}(String id) async {",
			"  //Fetch map from api.",
			"  final map = await _api.get<Json>('get_${1}?id=\\$id');",
			"  ",
			"  //Save to storage box.",
			"  await _box.write(_key, map.toJson());",
			"  ",
			"  //Return to ${2}Service.",
			"  return ${2}.fromMap(map);",
			"  }",
			"  ",
			"  //Methods examples",
			"  Future<void> update() async {}",
			"  Future<void> delete() async {}",
			"",
			"}",
			""
		],
		"description": "Generates a Repository class"
	},
	"Generates a model class": {
		"prefix": "gmodel",
		"body": [
			"///Adds getters and utilities to [${2:${TM_FILENAME_BASE/([^_]+).*/${1:/pascalcase}/}}].",
			"extension ${2}Ext on ${2} {",
			"///Checks if this is logged.",
			"bool get isLogged => token != null;",
			"",
			"///Updates this [${2}].",
			"${2} update(${2} other) => copyWith(avatar: other.avatar);",
			"}",
			"",
			"",
			"///[${2}] data representation.",
			"///",
			"///todo: document the purpose of [${2}].",
			"class ${2} {",
			"  ${2}(this.id, this.name, this.token, this.avatar);",
			"  ",
			"  final int id;",
			"  final String name;",
			"  final String? token;",
			"  final String? avatar;",
			"  ",
			"  //todo: generate toJson() toMap() copyWith() toString().",
			"  ",
			"  //You can do this easily with 'Dart Data Class Generator':",
			"  //VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=hzgood.dart-data-class-generator",
			"  // • Just QuickFix on the class name and 'generate data class'.",
			"  ",
			"  //You can also put a raw json on a .dart file.",
			"  // • Just c+shfit+p and choose 'Generate from JSON'.",
			"  ",
			"  Debug copyWith({",
			"    int? id,",
			"    String? name,",
			"    String? token,",
			"    String? avatar,",
			"  }) {",
			"    return Debug(",
			"      id ?? this.id,",
			"      name ?? this.name,",
			"      token ?? this.token,",
			"      avatar ?? this.avatar,",
			"    );",
			"  }",
			"}",
			""
		],
		"description": "Generates a Repository class"
	}
}